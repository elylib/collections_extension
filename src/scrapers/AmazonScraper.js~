import React from 'react';
import {extractPrice} from './Utilities';
import {isbnRegex, priceRegex} from './Regexes';

export default class AmazonScraper {

    constructor(doc) {
	this.doc = doc;
    }

    getISBN() {
	let table = this.doc.getElementById('productDetailsTable');
	try {
	    return table.textContent.match(isbnRegex)[0];
	} catch(e) {
	    return '';
	}
    }

    getTitle() {
	try {
	    return this.doc.getElementById('productTitle').textContent.trim();
	} catch (e) {
	    return '';
	}
    }

    getAuthors() {
	/*
         * Get the DOM nodes, convert it to an array, get the text and filter so it's only authors and
	 * not extra cruft.
	 */
	try {
	    let byline = this.doc.querySelectorAll('#byline a');
	    return Array.from(byline).
		map(this.nodeToString).
		filter(this.isAnAuthor).
		join(', ');
	} catch(e) {
	    return '';
	}
    }

    nodeToString(node) {
	return node.textContent;
    }
    
    isAnAuthor(str) {
	return str && str.indexOf('Visit Amazon') === -1 && str.indexOf('search') === -1 && str.indexOf('Learn about') === -1;
    }

    getPrice() {
	let price = this.tryNewPrice();
	if (!price) {
	    price = this.tryUsedPrice();
	}
	return extractPrice(price, priceRegex);
    }

    tryNewPrice() {
	let firstTry = this.doc.getElementById('newOfferAccordionRow');
	return firstTry ? firstTry : this.doc.getElementById('buyNewSection');
    }

    tryUsedPrice() {
	let firstTry = this.doc.querySelector('#tmmSwatches .selected .olp-used');
	return firstTry ? firstTry : this.doc.querySelector('#mediaOlp .olp-padding-right .a-color-price');
    }
};
